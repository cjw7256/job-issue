<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper
	namespace="sample.project.jobissue.repository.mybatis.AdminMapper">
	<!-- 기업 회원 리스트 가져옴 -->
	<select id="selectCorUserInfoList" resultType="UserVO"> <!-- user가 일반 회원인 경우에는 user_name이 바로 들어오고, cor일 경우에는 cor_code를 이용해 서브 쿼리를 작성해야 함 -->
		SELECT cor.cor_name userName, ut.userType userType, u.USER_JOINDATE userJoinDate
		FROM USER_INFO u, corporation_info cor, userTypeCode ut
		where u.cor_code = cor.cor_code 
		and u.user_type = ut.usertype_Code
		and u.user_Type = '2'
		ORDER BY USER_JOINDATE desc
	</select>

	<!-- 일반 회원 리스트 가져옴  -->
	<select id="selectUserInfoList" resultType="UserVO"> <!-- user가 일반 회원인 경우에는 user_name이 바로 들어오고, cor일 경우에는 cor_code를 이용해 서브 쿼리를 작성해야 함 -->
		SELECT u.USER_NAME userName, ut.userType userType, u.USER_JOINDATE userJoinDate
		FROM USER_INFO u, userTypeCode ut
		where u.user_type = ut.usertype_Code
        and u.user_type = '1'
		ORDER BY USER_JOINDATE desc
	</select>
	
	<!-- 공고 승인 대기 리스트를 전부 가져옴  -->
	<select id="selectPreAll" resultType="PreRecruitment">
		select pr.Announcement announcement, cor.cor_name corName, 
		pr.Announcement_Code announcementCode, pr.Recruit_writeDate recruitWriteDate 
		from preAppRecru pr, corporation_info cor
		where pr.cor_code = cor.cor_code
		AND pr.APPLYSTATUS = '00'
	</select>

	<!-- 공고 상세 정보 -->
	<resultMap type="PreRecruitment" id="preRecruitmentMap">
	<id property="announcementCode" column="ANNOUNCEMENT_CODE"></id>
	<result property="corName" column="cor_name"></result>
	<result property="announcement" column="announcement"></result>
	<result property="recruitField" column="RECRUIT_FIELD"></result>
	<result property="salary" column="salary"></result> <!-- // -->
	<result property="career" column="career"></result>
	<result property="recruitPerson" column="RECRUIT_PERSON"></result>
	<result property="receiptStartDate" column="receipt_start"></result>
	<result property="receiptEndDate" column="receipt_end"></result>
	<result property="recruitWriteDate" column="Recruit_writeDate"></result>
	<result property="applyStat" column="applyStat"></result>
	<!-- 다른 테이블 연동해서 가져와야 하므로... id를 가지고(select where절에 필요(매개변수)) 실행할 select문은 
		작성한 id="selectFoodItemOptions"이므로... -->
	<collection property="employType" column="ANNOUNCEMENT_CODE"
		select="selectPreEmployType"></collection>
	<collection property="workingArea" column="ANNOUNCEMENT_CODE"
		select="selectPreWorkingArea"></collection>
	<collection property="academicRecord" column="ANNOUNCEMENT_CODE"
		select="selectPreAcademicRecord"></collection>
	</resultMap>
	
	<!-- 채용 상세 정보 -->
	<select id="selectPreByAnnCode" resultMap="preRecruitmentMap">
		SELECT par.cor_code, par.Announcement_Code, par.Announcement, par.SALARY, par.RECRUIT_PERSON, par.RECEIPT_START, par.RECEIPT_END, par.Recruit_writeDate, 
		cor.cor_name, rfc.RECRUIT_FIELD, c.Career, asu.applyStat
		FROM preAppRecru par, corporation_info cor, RecruitFieldCode rfc, CareerCode c , applyStatCode asu
		WHERE par.Announcement_Code = #{annCode} 
		AND par.cor_code = cor.cor_code
		AND par.RECRUIT_FIELD_Code = rfc.RECRUIT_FIELD_Code 
		AND par.career_code = c.career_code
		AND par.applyStatus = asu.applyStat_Code
		AND par.applyStatus = '00'
	</select>

	<select id="selectPreEmployType" resultType="String">
		SELECT NVL(et.employtype, '')
		FROM premultiEmp pme, EmployTypeCode et
		WHERE pme.ANNOUNCEMENT_CODE = #{annCode}
		AND pme.EmployType_Code = et.EmployType_Code
	</select>
	
	<select id="selectPreWorkingArea" resultType="String">
		SELECT NVL(wa.WORKING_AREA, '')
		FROM premultiWorkArea pmw, WorkingAreaCode wa
		WHERE pmw.ANNOUNCEMENT_CODE = #{annCode}
		AND pmw.WORKING_AREA_CODE = wa.WORKING_AREA_CODE
	</select>
	
	<select id="selectPreAcademicRecord" resultType="String">
		select NVL(arc.ACADEMIC_RECORD, '') 
		from premultiAcaReco pma, AcademicRecordCode arc
		where pma.ANNOUNCEMENT_CODE = #{annCode}
		and pma.ACADEMIC_RECORD_CODE = arc.ACADEMIC_RECORD_CODE
	</select>
	
	
	<!-- insert문  -->
	
	<!-- PRE->RECRU 로 승인된 공고 DB 저장-->
	<insert id="insertPreToRecru" parameterType="PreRecruitment">
		insert into Recruitment
		values
		(
			#{corCode}, #{announcementCode}, #{announcement}, #{recruitField}, #{salary}, 
			#{career}, #{recruitPerson}, #{receiptStartDate}, #{receiptEndDate}, #{recruitWriteDate}
		)
	</insert>
	
	
	
	<!-- PRE->RECRU 로 고용형태 등록 -->
	<insert id="insertPreToMulEmp" parameterType="PreRecruitment">
		<foreach collection="empOptions" item="item" open="INSERT ALL"
			close="SELECT * FROM DUAL" separator=" ">
			INTO multiEmp
			VALUES(#{announcementCode}, #{item})
		</foreach>
	</insert>
	
	<!-- PRE->RECRU 로 근무지역 등록 -->
	<insert id="insertPreToMulWork" parameterType="PreRecruitment">
		<foreach collection="workOptions" item="item" open="INSERT ALL"
			close="SELECT * FROM DUAL" separator=" ">
			INTO multiWorkArea
			VALUES(#{announcementCode}, #{item})
		</foreach>
	</insert>
	
	<!-- PRE->RECRU 로 학력코드 등록 -->
	<insert id="insertPreToMulAca" parameterType="PreRecruitment">
		<foreach collection="acaOptions" item="item" open="INSERT ALL"
			close="SELECT * FROM DUAL" separator=" ">
			INTO multiAcaReco
			VALUES(#{announcementCode}, #{item})
		</foreach>
	</insert>
	
	<!-- 공고번호가 같은 것을 찾아 해당 공고의 stat을 변경(승인이면 승인, 거절이면 거절) -->
	<select id="updatePreStat">
	update preAppRecru
	set APPLYSTATUS = #{applyStat}
	where announcement_code = #{announcementCode}
	</select>

	<!-- <delete id="deleteFoodItemOptions">
		delete from foodItemOptions
		where foodid = #{id}
	</delete> -->
	
</mapper>







